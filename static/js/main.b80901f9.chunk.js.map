{"version":3,"sources":["data-provider/browsers.js","App.js","reportWebVitals.js","index.js"],"names":["dictionary","and","chr","ff","ios","ie","saf","chrome","edge","firefox","safari","getBrowserListing","listing","desktop","mobile","browserslist","oatBrowserListConfig","reduce","list","browser","key","split","formatted","data","reverse","map","part","device","includes","os","versions","format","concat","Object","values","sort","keys","obj","App","className","label","entry","toLowerCase","replace","join","vLabel","length","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"yRAOMA,EAAa,CACfC,IAAK,UACLC,IAAK,SACLC,GAAI,UACJC,IAAK,MACLC,GAAI,oBACJC,IAAK,SACLC,OAAQ,SACRC,KAAM,OACNC,QAAS,UACTC,OAAQ,UAsDGC,MA/Bf,WACI,IAAMC,EAAU,CACZC,QAAS,GACTC,OAAQ,IAEZC,IAAaC,KAAsBC,QAAO,SAACC,EAAMC,GAC7C,IAAMC,EAAMD,EAAQE,MAAM,KAAK,GACzBC,EAtBC,SAAAH,GACX,IAAMI,EAAOJ,EAAQE,MAAM,KAAK,GAAGA,MAAM,KAAKG,UAAUC,KAAI,SAAAC,GAAI,OAAI1B,EAAW0B,GAAQ1B,EAAW0B,GAAQA,KACpGC,EAASJ,EAAK,IAAM,CAAC,MAAO,WAAWK,SAASL,EAAK,IAAM,SAAW,UAC5E,MAAO,CACHJ,QAASI,EAAK,GACdM,GAAIN,EAAK,IAAM,GACfO,SAAU,CAACX,EAAQE,MAAM,KAAK,IAC9BM,OAAQA,GAeUI,CAAOZ,GAOzB,OANKP,EAAQU,EAAUK,QAAQP,GAG3BR,EAAQU,EAAUK,QAAQP,GAAKU,SAAWlB,EAAQU,EAAUK,QAAQP,GAAKU,SAASE,OAAOV,EAAUQ,UAFnGlB,EAAQU,EAAUK,QAAQP,GAAOE,EAK9BV,IACR,IAfuB,eAgBlBe,GACJ,IAAI,IAAJ,MAAkBM,OAAOC,OAAOtB,EAAQe,IAAxC,eAAkD,CAApC,KACHG,SAASK,OAEpBF,OAAOG,KAAKxB,EAAQe,IAASQ,OAAOlB,QAChC,SAACoB,EAAKjB,GAEJ,OADAiB,EAAIjB,GAAOR,EAAQe,GAAQP,GACpBiB,IAET,KATR,IAAI,IAAIV,KAAUf,EAAS,EAAnBe,GAYR,OAAOM,OAAOC,OAAOtB,EAAO,SAAaoB,OAAOC,OAAOC,OAAOtB,EAAO,U,OCX1D0B,MAtDf,WA8CI,OACI,sBAAKC,UAAU,MAAf,UACI,oBAAIA,UAAU,QAAd,uCACA,oBAAIA,UAAU,WAAd,SA/CO,WAOX,IAAMC,EAAQ,SAAAC,GAAK,OAAIA,EAAMZ,GAAKY,EAAMtB,QAAU,IAAMsB,EAAMZ,GAAKY,EAAMtB,SAOnEC,EAAM,SAAAqB,GAAK,OAAKA,EAAMZ,GACxBY,EAAMtB,QAAU,IAAMsB,EAAMZ,GAC5BY,EAAMtB,SAASuB,cAAcC,QAAQ,OAAQ,MAO3Cb,EAAW,SAAAW,GAAK,OAAIA,EAAMX,SAASc,KAAK,OAOxCC,EAAS,SAAAJ,GAAK,OAA8B,IAA1BA,EAAMX,SAASgB,QAAiBL,EAAMX,SAAS,GAAGF,SAAS,KAE/E,WADA,WAGJ,OAAOjB,IAAoBc,KAAI,SAACgB,GAAD,OAC3B,qBAAIF,UAAWnB,EAAIqB,GAAnB,UACI,sBAAMF,UAAU,OAAhB,eACA,oBAAIA,UAAU,QAAd,SAAuBC,EAAMC,KAC7B,sBAAMF,UAAU,YAAhB,SAA6BM,EAAOJ,KACpC,sBAAMF,UAAU,WAAhB,SAA4BT,EAASW,OAJTrB,EAAIqB,OAYVM,SCxCvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b80901f9.chunk.js","sourcesContent":["import browserslist from 'browserslist';\nimport oatBrowserListConfig from '@oat-sa/browserslist-config-tao';\n\n/**\n * Vocabulary to expand short codes for browsers and OSs to human readable names\n * @type {{ff: string, edge: string, chrome: string, safari: string, and: string, firefox: string, saf: string, chr: string, ios: string, ie: string}}\n */\nconst dictionary = {\n    and: 'Android',\n    chr: 'Chrome',\n    ff: 'Firefox',\n    ios: 'iOS',\n    ie: 'Internet Explorer',\n    saf: 'Safari',\n    chrome: 'Chrome',\n    edge: 'Edge',\n    firefox: 'Firefox',\n    safari: 'Safari'\n}\n\n/**\n * Converts the short codes to an object\n * @param {String} browser\n * @returns {{os: string, versions: [*], browser: string, device: string}}\n */\nconst format = browser => {\n    const data = browser.split(' ')[0].split('_').reverse().map(part => dictionary[part] ? dictionary[part] : part);\n    const device = data[1] && ['iOS', 'Android'].includes(data[1]) ? 'mobile' : 'desktop';\n    return {\n        browser: data[0],\n        os: data[1] || '',\n        versions: [browser.split(' ')[1]],\n        device: device\n    }\n}\n\n/**\n * Convert browser data to an array\n * order: desktop -> mobile, then alphabetically, then version\n */\nfunction getBrowserListing () {\n    const listing = {\n        desktop: {},\n        mobile: {}\n    }\n    browserslist(oatBrowserListConfig).reduce((list, browser) => {\n        const key = browser.split(' ')[0];\n        const formatted = format(browser);\n        if (!listing[formatted.device][key]) {\n            listing[formatted.device][key] = formatted;\n        } else {\n            listing[formatted.device][key].versions = listing[formatted.device][key].versions.concat(formatted.versions);\n        }\n\n        return listing;\n    }, {});\n    for(let device in listing){\n        for(let values of Object.values(listing[device])) {\n            values.versions.sort();\n        }\n        Object.keys(listing[device]).sort().reduce(\n            (obj, key) => {\n              obj[key] = listing[device][key];\n              return obj;\n            },\n            {}\n          );\n    }\n    return Object.values(listing['desktop']).concat(Object.values(listing['mobile']));\n};\n\nexport default getBrowserListing;\n","import './App.css';\nimport getBrowserListing from './data-provider/browsers';\n\nfunction App() {\n\n    const render = () => {\n\n        /**\n         * Format browser and OS as `Browser/OS` or `Browser`\n         * @param {Object} entry\n         * @returns {String}\n         */\n        const label = entry => entry.os ? entry.browser + '/' + entry.os : entry.browser;\n\n        /**\n         * Format browser and OS as `browser-os` or `browser`\n         * @param {Object} entry\n         * @returns {String}\n         */\n        const key = entry => (entry.os ?\n            entry.browser + '-' + entry.os :\n            entry.browser).toLowerCase().replace(/\\W+/g, '-');\n\n        /**\n         * Format [version-a, version-b] as `version-a, version-b`\n         * @param {Object} entry\n         * @returns {String}\n         */\n        const versions = entry => entry.versions.join(', ');\n\n        /**\n         * Return either `Version` or `Versions`, depending on the actual number of versions\n         * @param {Object} entry\n         * @returns {String}\n         */\n        const vLabel = entry => entry.versions.length === 1 && !entry.versions[0].includes('-') ?\n            'Version' :\n            'Versions';\n\n        return getBrowserListing().map((entry) => (\n            <li className={key(entry)} key={key(entry)}>\n                <span className=\"icon\"> </span>\n                <h2 className=\"title\">{label(entry)}</h2>\n                <span className=\"supported\">{vLabel(entry)}</span>\n                <span className=\"versions\">{versions(entry)}</span>\n            </li>\n        ));\n    };\n\n    return (\n        <div className=\"app\">\n            <h1 className=\"title\">Browsers supported by TAO</h1>\n            <ul className=\"browsers\">{render()}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}