{"version":3,"sources":["constants/browsers.js","App.js","reportWebVitals.js","index.js"],"names":["ios_saf","and_chr","and_ff","chrome","safari","firefox","edge","ie","library","add","fab","App","supportedBrowsers","browserslist","oatBrowserListConfig","groupBrowsers","reduce","list","browser","key","split","version","className","Object","entries","map","icon","browserCodeTransformer","size","indexOf","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2PAAe,G,MAAA,CACXA,QAAS,QACTC,QAAS,UACTC,OAAQ,UACRC,OAAQ,SACRC,OAAQ,SACRC,QAAS,UACTC,KAAM,OACNC,GAAI,sB,8DCARC,IAAQC,IAAIC,KAoDGC,MAlDf,WACI,IAAMC,EAAoBC,IAAaC,KAEjCC,EAAgB,WAClB,OAAOH,EAAkBI,QAAO,SAACC,EAAMC,GACnC,IAAMC,EAAMD,EAAQE,MAAM,KAAK,GACzBC,EAAUH,EAAQE,MAAM,KAAK,GAQnC,OANKH,EAAKE,GAGNF,EAAKE,GAAOF,EAAKE,GAAO,KAAOE,EAF/BJ,EAAKE,GAAOE,EAKTJ,IACR,KA2BP,OACI,sBAAKK,UAAU,MAAf,UACI,oBAAIA,UAAU,QAAd,uCACA,oBAAIA,UAAU,WAAd,SA3BO,WACX,IAAMV,EAAoBG,IAE1B,OAAOQ,OAAOC,QAAQZ,GAAmBa,KAAI,mCAAEP,EAAF,KAAWG,EAAX,YACzC,qBAAIC,UAAU,UAAd,UACI,cAAC,IAAD,CAAiBI,KAAM,CAAC,MAAOC,EAAuBT,IAAWU,KAAK,OACrEV,EAAQW,QAAQ,WAAa,EAC1B,iDACAX,EAAQW,QAAQ,YAAc,EAC9B,gDACAX,EAAQW,QAAQ,YAAc,EAC9B,4CACAX,EAAQW,QAAQ,OAAS,EACzB,mDAEA,oBAAIP,UAAU,aAAd,SAA4BJ,IAGhC,mBAAGI,UAAU,aAAb,gCACA,sBAAMA,UAAU,iBAAhB,SAAkCD,MAfTH,MAuBHY,SC3CvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5fb45d18.chunk.js","sourcesContent":["export default {\n    ios_saf: 'apple',\n    and_chr: 'android',\n    and_ff: 'android',\n    chrome: 'chrome',\n    safari: 'safari',\n    firefox: 'firefox',\n    edge: 'edge',\n    ie: 'internet-explorer'\n};\n","import './App.css';\nimport browserCodeTransformer from './constants/browsers.js';\nimport browserslist from 'browserslist';\nimport oatBrowserListConfig from '@oat-sa/browserslist-config-tao';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fab);\n\nfunction App() {\n    const supportedBrowsers = browserslist(oatBrowserListConfig);\n\n    const groupBrowsers = () => {\n        return supportedBrowsers.reduce((list, browser) => {\n            const key = browser.split(' ')[0];\n            const version = browser.split(' ')[1];\n\n            if (!list[key]) {\n                list[key] = version;\n            } else {\n                list[key] = list[key] + ', ' + version;\n            }\n\n            return list;\n        }, {});\n    };\n\n    const render = () => {\n        const supportedBrowsers = groupBrowsers();\n\n        return Object.entries(supportedBrowsers).map(([browser, version]) => (\n            <li className=\"browser\" key={browser}>\n                <FontAwesomeIcon icon={['fab', browserCodeTransformer[browser]]} size=\"6x\" />\n                {browser.indexOf('and_ff') > -1 ? (\n                    <h2>Android Firefox</h2>\n                ) : browser.indexOf('and_chr') > -1 ? (\n                    <h2>Android Chrome</h2>\n                ) : browser.indexOf('ios_saf') > -1 ? (\n                    <h2>iOS Safari</h2>\n                ) : browser.indexOf('ie') > -1 ? (\n                    <h2>Internet Explorer</h2>\n                ) : (\n                    <h2 className=\"capitalize\">{browser}</h2>\n                )}\n\n                <p className=\"subheading\">Supported Versions</p>\n                <span className=\"strong version\">{version}</span>\n            </li>\n        ));\n    };\n\n    return (\n        <div className=\"app\">\n            <h1 className=\"title\">Browsers supported by TAO</h1>\n            <ul className=\"browsers\">{render()}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}